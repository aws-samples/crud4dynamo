/*
 * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 *   Licensed under the Apache License, Version 2.0 (the "License").
 *   You may not use this file except in compliance with the License.
 *   A copy of the License is located at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   or in the "license" file accompanying this file. This file is distributed
 *   on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 *   express or implied. See the License for the specific language governing
 *   permissions and limitations under the License.
 */

package com.amazon.crud4dynamo.compatibility.mapperannotation;

import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.AssertionsForClassTypes.assertThatThrownBy;

import com.amazon.crud4dynamo.CrudForDynamo;
import com.amazon.crud4dynamo.annotation.Param;
import com.amazon.crud4dynamo.annotation.Put;
import com.amazon.crud4dynamo.compatibility.Book;
import com.amazon.crud4dynamo.compatibility.Book.Attributes;
import com.amazon.crud4dynamo.compatibility.Book.CustomDate;
import com.amazon.crud4dynamo.compatibility.Book.Picture;
import com.amazon.crud4dynamo.crudinterface.CompositeKeyCrud;
import com.amazon.crud4dynamo.testbase.SingleTableDynamoDbTestBase;
import com.amazonaws.services.dynamodbv2.document.Item;
import com.amazonaws.services.dynamodbv2.document.spec.GetItemSpec;
import com.amazonaws.services.dynamodbv2.model.ReturnValue;
import com.google.common.collect.Lists;
import java.util.List;
import java.util.Optional;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

public class PutMethodsMapperAnnotationTest extends SingleTableDynamoDbTestBase<Book> {

  private BookDao bookDao;

  @Override
  protected Class<Book> getModelClass() {
    return Book.class;
  }

  @Override
  @BeforeEach
  public void setUp() throws Exception {
    super.setUp();

    bookDao = new CrudForDynamo(getDynamoDbClient()).create(BookDao.class);
  }

  @Test
  void annotation_DynamoDBAutoGeneratedKey_throwException() {
    assertThatThrownBy(() -> bookDao.put(Book.builder().author("dummy").build()))
        .hasMessageContaining("One of the required keys was not given a value");
  }

  @Test
  void annotation_DynamoDBIgnore() {
    final String dummyAuthor = "dummy author";
    final Book book = Book.builder().author(dummyAuthor).id("dummy id").ignored("ignored").build();

    bookDao.put(book);

    final List<Book> books = Lists.newArrayList(bookDao.groupBy(dummyAuthor));
    book.setIgnored(null);
    assertThat(books).hasSize(1);
    assertThat(books.get(0)).isEqualTo(book);
  }

  @Test
  void annotation_DynamoDBTyped() {
    final String dummyAuthor = "dummy author";
    final int dummyInteger = 123;
    final Book book =
        Book.builder()
            .author(dummyAuthor)
            .id("dummy id")
            .integerStoredAsString(dummyInteger)
            .build();

    bookDao.put(book);

    final List<Book> books = Lists.newArrayList(bookDao.groupBy(dummyAuthor));
    assertThat(books).hasSize(1);
    assertThat(books.get(0)).isEqualTo(book);
  }

  @Test
  void annotation_DynamoDBDocument() {
    final String dummyAuthor = "dummy author";
    final Book book =
        Book.builder()
            .author(dummyAuthor)
            .id("dummy id")
            .cover(Picture.builder().height(100).width(100).sourcePath("a/path").build())
            .build();

    bookDao.put(book);

    final List<Book> books = Lists.newArrayList(bookDao.groupBy(dummyAuthor));
    assertThat(books).hasSize(1);
    assertThat(books.get(0)).isEqualTo(book);
  }

  @Test
  void annotation_DynamoDBTypeConverted() {
    final String dummyAuthor = "dummy author";
    final Book book =
        Book.builder()
            .author(dummyAuthor)
            .id("dummy id")
            .customDate(CustomDate.builder().year(1984).month(4).day(1).build())
            .build();

    bookDao.put(book);

    final List<Book> books = Lists.newArrayList(bookDao.groupBy(dummyAuthor));
    assertThat(books).hasSize(1);
    assertThat(books.get(0)).isEqualTo(book);

    final Optional<Item> item =
        getItem(
            new GetItemSpec()
                .withPrimaryKey(
                    Attributes.HASH_KEY, dummyAuthor, Attributes.RANGE_KEY, book.getId()));
    assertThat(item).isPresent();
    assertThat(item.get().asMap()).containsEntry(Attributes.CUSTOM_DATE, "1984-4-1");
  }

  public interface BookDao extends CompositeKeyCrud<String, Integer, Book> {

    @Put(returnValue = ReturnValue.ALL_OLD)
    Book put(@Param(":item") final Book book);
  }
}
