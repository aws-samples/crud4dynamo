plugins {
    id 'java-library'
    id 'antlr'
    id "com.diffplug.gradle.spotless" version "3.23.0"
}

repositories {
    jcenter()
    mavenCentral()
    maven {
        // name "DynamoDB Local Release Repository - Asia Pacific (Tokyo) Region"
        url "https://s3-ap-northeast-1.amazonaws.com/dynamodb-local-tokyo/release"
    }
}

ext {
    antlrConfig = [
            lib: 'src/main/antlr/ddbexpressions/',
            // configure the package name for generated source
            package: "com.amazon.${rootProject.name}.ddbparser".toString() // a bug in antlr plugin, need to explicitly call toString
    ]
    depVersions = [
            antlr4: '4.7.1',
            dynamodbsdk: '1.11.560',
            localdynamodb: '1.11.477',
            guava: '27.0.1-jre',
            slf4jlog4j: '2.11.2',
            assertj: '3.12.2',
            mockito: '2.27.0',
            jackson: '2.9.9',
            junit5: '5.4.2',
            lombok: '1.18.8'
    ]
}

dependencies {
    antlr group: 'org.antlr', name: 'antlr4', version: depVersions.antlr4

    // api
    // This is where you should declare dependencies which are transitively exported to consumers, for compile.
    api group: 'com.amazonaws', name:'aws-java-sdk-dynamodb', version: depVersions.dynamodbsdk

    // implementation
    // This is where you should declare dependencies which are purely internal and not meant to be exposed to consumers.
    implementation group: 'com.google.guava', name: 'guava', version: depVersions.guava
    implementation group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: depVersions.slf4jlog4j

    // compileOnly
    // This is where you should declare dependencies which are only required at compile time, but should not leak into runtime
    // This typically includes dependencies which are shaded when found at runtime
    compileOnly group: 'org.projectlombok', name: 'lombok', version: depVersions.lombok

    // runtimeOnly
    // This is where you should declare dependencies which are only required at runtime, and not at compile time

    // annotationProcessor
    annotationProcessor group: 'org.projectlombok', name: 'lombok', version: depVersions.lombok

    // testImplementation
    // This is where you should declare dependencies which are used to compile tests
    testImplementation group: 'org.assertj', name: 'assertj-core', version: depVersions.assertj
    testImplementation group: 'org.mockito', name: 'mockito-core', version: depVersions.mockito
    testImplementation group: 'org.mockito', name: 'mockito-junit-jupiter', version: depVersions.mockito
    testImplementation group: 'com.amazonaws', name: 'DynamoDBLocal', version: depVersions.localdynamodb
    testImplementation group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: depVersions.jackson
    testImplementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: depVersions.jackson
    testImplementation group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: depVersions.jackson

    // testCompileOnly
    // This is where you should declare dependencies which are only required at test compile time, but should not leak into the runtime
    // This typically includes dependencies which are shaded when found at runtime
    testCompileOnly group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: depVersions.junit5
    testCompileOnly group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: depVersions.junit5
    testCompileOnly group: 'org.projectlombok', name: 'lombok', version: depVersions.lombok

    // testRuntimeOnly
    // This is where you should declare dependencies which are only required at test runtime, and not at test compile time
    testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: depVersions.junit5

    // testAnnotationProcessor
    testAnnotationProcessor group: 'org.projectlombok', name: 'lombok', version: depVersions.lombok
}

generateGrammarSource {
    maxHeapSize = "64m"
    arguments += ["-visitor", "-long-messages", "-package", antlrConfig.package, "-lib", antlrConfig.lib]
}

test {
    useJUnitPlatform()
}

spotless {
    java {
        target 'src/main/**/*.java'
        googleJavaFormat('1.7')
    }

    format 'misc', {
        target '**/*.gradle', '**/*.md', '**/.gitignore'
        trimTrailingWhitespace()
        indentWithSpaces(4)
        endWithNewline()
    }
}
