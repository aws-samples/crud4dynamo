plugins {
    id 'java-library'
    id 'antlr'
    id 'jacoco'
    id 'com.jfrog.bintray' version '1.8.4'
    id 'maven-publish'
}

group = 'com.amazon'
version = '1.0'

repositories {
    jcenter()
    mavenCentral()
    maven {
        // name "DynamoDB Local Release Repository - Asia Pacific (Tokyo) Region"
        url "https://s3-ap-northeast-1.amazonaws.com/dynamodb-local-tokyo/release"
    }
}

ext {
    antlrConfig = [
            lib: 'src/main/antlr/ddbexpressions/',
            // configure the package name for generated source
            package: "com.amazon.${rootProject.name}.ddbparser".toString() // a bug in antlr plugin, need to explicitly call toString
    ]
    depVersions = [
            antlr4: '4.7.1',
            dynamodbsdk: '1.11.560',
            localdynamodb: '1.11.477',
            guava: '27.0.1-jre',
            slf4jlog4j: '2.11.2',
            assertj: '3.12.2',
            mockito: '2.27.0',
            jackson: '2.9.9',
            junit5: '5.4.2',
            lombok: '1.18.8'
    ]
}

dependencies {
    antlr group: 'org.antlr', name: 'antlr4', version: depVersions.antlr4

    // api
    // This is where you should declare dependencies which are transitively exported to consumers, for compile.
    api group: 'com.amazonaws', name:'aws-java-sdk-dynamodb', version: depVersions.dynamodbsdk

    // implementation
    // This is where you should declare dependencies which are purely internal and not meant to be exposed to consumers.
    implementation group: 'com.google.guava', name: 'guava', version: depVersions.guava
    implementation group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: depVersions.slf4jlog4j

    // compileOnly
    // This is where you should declare dependencies which are only required at compile time, but should not leak into runtime
    // This typically includes dependencies which are shaded when found at runtime
    compileOnly group: 'org.projectlombok', name: 'lombok', version: depVersions.lombok

    // runtimeOnly
    // This is where you should declare dependencies which are only required at runtime, and not at compile time

    // annotationProcessor
    annotationProcessor group: 'org.projectlombok', name: 'lombok', version: depVersions.lombok

    // testImplementation
    // This is where you should declare dependencies which are used to compile tests
    testImplementation group: 'org.assertj', name: 'assertj-core', version: depVersions.assertj
    testImplementation group: 'org.mockito', name: 'mockito-core', version: depVersions.mockito
    testImplementation group: 'org.mockito', name: 'mockito-junit-jupiter', version: depVersions.mockito
    testImplementation group: 'com.amazonaws', name: 'DynamoDBLocal', version: depVersions.localdynamodb
    testImplementation group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: depVersions.jackson
    testImplementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: depVersions.jackson
    testImplementation group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: depVersions.jackson

    // testCompileOnly
    // This is where you should declare dependencies which are only required at test compile time, but should not leak into the runtime
    // This typically includes dependencies which are shaded when found at runtime
    testCompileOnly group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: depVersions.junit5
    testCompileOnly group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: depVersions.junit5
    testCompileOnly group: 'org.projectlombok', name: 'lombok', version: depVersions.lombok

    // testRuntimeOnly
    // This is where you should declare dependencies which are only required at test runtime, and not at test compile time
    testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: depVersions.junit5

    // testAnnotationProcessor
    testAnnotationProcessor group: 'org.projectlombok', name: 'lombok', version: depVersions.lombok
}

generateGrammarSource {
    maxHeapSize = "64m"
    arguments += ["-visitor", "-long-messages", "-package", antlrConfig.package, "-lib", antlrConfig.lib]
}

test {
    useJUnitPlatform()
}

jacoco {
    toolVersion = "0.8.3"
}

jacocoTestReport {
    reports {
        xml.enabled = true // coveralls plugin depends on xml format report
        html.enabled = true
        html.destination file("${buildDir}/jacocoHtml")
    }

    afterEvaluate {
        // TODO: fix the usage of deprecated API
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    "${antlrConfig.package.replace('.', '/')}/**"
            ])
        })
    }
}


javadoc.failOnError = false

task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    archiveClassifier = 'sources'
}

task javadocJar(type: Jar) {
    from javadoc
    archiveClassifier = 'javadoc'
}

bintray {
    user = System.getProperty('bintray.user')
    key = System.getProperty('bintray.key')
    publications = ['mavenPublication']

    pkg {
        repo = 'crud4dynamo'
        name = 'crud4dynamo'
        licenses = ['Apache-2.0']
        vcsUrl = 'https://github.com/aws-samples/crud4dynamo'
        version {
            name = '1.0.0'
            desc = '1.0.0'
            released = new Date()
        }
    }
}

def pomConfig = {
    licenses {
        license {
            name "The Apache Software License, Version 2.0"
            url "http://www.apache.org/licenses/LICENSE-2.0.txt"
            distribution "repo"
        }
    }
    developers {
        developer {
            id 'alanzplus'
            name 'Alan Xuan'
            email 'jzxuanuni@gmail.com'
        }
    }

    scm {
        url 'https://github.com/aws-samples/crud4dynamo'
    }
}


publishing {
    publications {
        mavenPublication(MavenPublication) {
            from components.java
            artifactId 'crud4dynamo'
            artifact sourcesJar
            artifact javadocJar
            pom.withXml {
                def root = asNode()
                root.appendNode('description', 'A light-weight library built on-top of AWS DynamoDB SDK and provides the interfaces for common access patterns when dealing with DynamoDB.')
                root.appendNode('name', 'Crud4Dynamo')
                root.appendNode('url', 'https://github.com/aws-samples/crud4dynamo')
                root.children().last() + pomConfig
            }
        }
    }
}
